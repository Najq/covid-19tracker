{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","images/image.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeAbleURL","axios","get","modifiedData","console","log","fetchDailyData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","this","class","image","alt","src","covidImage","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c62a7aec.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3Rgoi\",\"card\":\"Cards_card__2U8v9\",\"infected\":\"Cards_infected__2ggv8\",\"recovered\":\"Cards_recovered__32rTe\",\"deaths\":\"Cards_deaths__2FbNc\"};","import React from 'react';\r\nimport {Card, CardContent, Typography, Grid} from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\n\r\n\r\nimport styles from './Cards.module.css';\r\n\r\nconst Cards = ({ data: {confirmed, recovered, deaths, lastUpdate} }) => {\r\n    \r\n    if(!confirmed){\r\n        return 'Loading..';\r\n    }\r\n    return(\r\n        <div className={styles.container}>\r\n            <Grid container spacing={3} justify=\"center\">\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start={0} end={confirmed.value} duration={2.5} separator=\",\" />\r\n                        </Typography>  \r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of active cases of Covid-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start={0} end={recovered.value} duration={2.5} separator=\",\" />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of recoveries from COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start={0} end={deaths.value} duration={2.5} separator=\",\" />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of deaths caused by Covid-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    );\r\n\r\n\r\n}\r\n\r\nexport default Cards;\r\n\r\n\r\n","import axios from 'axios';\r\nimport { DialogTitle } from '@material-ui/core';\r\n\r\nconst url = \"https://covid19.mathdro.id/api\";\r\n\r\nexport const fetchData = async (country) => {\r\n    let changeAbleURL = url;\r\n\r\n    if(country){\r\n        changeAbleURL = `${url}/countries/${country}`;\r\n    }\r\n\r\n    try{\r\n        const { data: {confirmed, recovered, deaths, lastUpdate} } = await axios.get(changeAbleURL);\r\n\r\n        const modifiedData = { confirmed, recovered, deaths, lastUpdate, }\r\n\r\n        return modifiedData;\r\n    }catch(err){\r\n        console.log(err);\r\n    }\r\n}\r\n\r\nexport const fetchDailyData = async () => {\r\n    try{\r\n        const { data } = await axios.get(`${url}/daily`);\r\n\r\n        const modifiedData = data.map((dailyData) => ({\r\n            confirmed : dailyData.confirmed.total,\r\n            deaths: dailyData.deaths.total,\r\n            date: dailyData.reportDate,\r\n        }));\r\n\r\n        return modifiedData;\r\n    }   \r\n    catch(error){\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const fetchCountries = async () => {\r\n    try{\r\n        const { data : { countries }} = await axios.get(`${url}/countries`);\r\n        \r\n        return countries.map((country) => country.name);\r\n    }catch(error){\r\n        console.log(error);\r\n    }\r\n}\r\n\r\n","import React, { useState, useEffect} from 'react';\r\nimport { fetchDailyData } from '../../api';\r\nimport {Line, Bar} from 'react-chartjs-2';\r\nimport cx from 'classnames';\r\nimport styles from './Chart.module.css';\r\n\r\nconst Chart = ( { data: {confirmed, deaths, recovered }, country } ) => {\r\n\r\n    const [dailyData, setDailyData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setDailyData(await fetchDailyData());\r\n        }\r\n\r\n\r\n        fetchAPI();\r\n    },[]);\r\n\r\n    const lineChart = (\r\n        dailyData.length ?\r\n            (<Line\r\n                data = {{\r\n                    labels: dailyData.map(({ date }) => date ),\r\n                    datasets:[{\r\n                        data: dailyData.map(({ confirmed }) => confirmed),\r\n                        label: 'Infected',\r\n                        borderColor: '#3333ff',\r\n                        fill: true,\r\n                    },{\r\n                        data: dailyData.map(({ deaths }) => deaths),\r\n                        label: 'Deaths',\r\n                        borderColor: 'red',\r\n                        backgroundColor: 'rgba(255, 0, 0, 0.5)',\r\n                        fill: true,\r\n                    }],\r\n                }}\r\n            />) : null\r\n    );\r\n\r\n    const barChart = (\r\n        confirmed ? \r\n        (\r\n            <Bar \r\n                data = {{\r\n                    labels: ['Infected','Recovered', 'Deaths'],\r\n                    datasets: [{\r\n                        label: 'People',\r\n                        backgroundColor: [\r\n                            'rgba( 0, 0, 255, 0.5)',\r\n                            'rgba(0,255,0, 0.5)',\r\n                            'rgba(255,0,0, 0.5)',\r\n                    ],\r\n                    data: [confirmed.value, recovered.value, deaths.value ]\r\n                    }]\r\n                }}\r\n                options = {{\r\n                    legend: {display: false },\r\n                    title: { display: true, text:`Current state in ${country}`}\r\n                }}\r\n            \r\n            />\r\n\r\n        ): null\r\n\r\n    );\r\n\r\n\r\n\r\n    return(\r\n        <h1  className={styles.container}>\r\n            { country ? barChart: lineChart}\r\n        </h1>\r\n    );\r\n\r\n\r\n}\r\n\r\nexport default Chart;\r\n\r\n\r\n","import React, { useState, useEffect } from 'react';\r\nimport { NativeSelect, FormControl } from '@material-ui/core';\r\nimport { fetchCountries } from '../../api';\r\nimport styles from './CountryPicker.module.css';\r\n\r\nconst CountryPicker = ( { handleCountryChange } ) => {\r\n\r\n    const [ fetchedCountries, setFetchedCountries ] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setFetchedCountries(await fetchCountries());\r\n        } \r\n\r\n        fetchAPI();\r\n    }, [setFetchedCountries]);\r\n\r\n    console.log(fetchedCountries);\r\n\r\n    return(\r\n        <FormControl className={styles.formControl}>\r\n            <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\r\n                <option value=\"\">Global</option>\r\n                {fetchedCountries.map((country,i) => <option key={i} value={country}>{country}</option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    );\r\n}\r\n\r\nexport default CountryPicker;\r\n\r\n\r\n","import React from 'react';\r\n\r\nimport {Cards, Chart, CountryPicker} from './components';\r\nimport styles from './App.module.css';\r\nimport {fetchData} from './api';\r\n\r\nimport covidImage from './images/image.png';\r\n\r\nclass App extends React.Component{\r\n\r\n    state = {\r\n        data: {},\r\n        country:\"\",\r\n    }\r\n\r\n    async componentDidMount(){\r\n        const fetchedData = await fetchData();\r\n\r\n        this.setState({data: fetchedData});\r\n\r\n    }\r\n\r\n    handleCountryChange = async (country) => {\r\n        //fetch data\r\n        //set the state\r\n        const fetchedData = await fetchData(country);\r\n\r\n        this.setState({data: fetchedData, country: country});\r\n\r\n    }\r\n\r\n\r\n    render(){\r\n\r\n        const {data, country} = this.state;\r\n\r\n        return(\r\n            <div class={styles.container}>\r\n                <img className={styles.image} alt=\"COVID-19\" src={covidImage}/>\r\n                <Cards data={data}/>\r\n                <CountryPicker handleCountryChange={this.handleCountryChange}/>\r\n                <Chart data={data} country={country}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"image\":\"App_image__1pFxJ\",\"container\":\"App_container__1kaRe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__U_v90\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2Hd0l\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}